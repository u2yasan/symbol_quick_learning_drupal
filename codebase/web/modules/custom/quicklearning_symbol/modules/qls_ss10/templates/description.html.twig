{#

Description text for Section 9.

#}

{{ attach_library('core/drupal.dialog.ajax') }}


{# {% set qls_ss9_settings_form = path('qls_ss9.settings') %} 
{% set qls_ss9_multi_sig_form = path('qls_ss9.multi_sig_form') %} #}

{% trans %}
<h2>第 10 章 監視</h2>

<p>
Symbol のノードはWebSocket 通信でブロックチェーンの状態変化を監視することが可能です。
</p>

<h3>10.1 リスナー設定</h3>
<p>
WebSocket を生成してリスナーの設定を行います。
PHP はサーバーサイド言語です。
PHP を使用してWebSocket を利用してブロックチェーンを監視するのは
かなり稀なパターンかと思いますのでここではjavascript を用いたフロントエンドでの実装方法を紹介します。
以下、速習SymbolV3 を元にしています。事前の環境構築はこちらを参照してください。
v2 におけるリスナーはrxjs に依存した機能であるため、v3 ではリスナーの機能はありません。
したがって、実装者がWebSocket クライアントをプログラミングする必要があります。
</p>

<h3>10.2 受信検知</h3>
<p>
アカウントが受信したトランザクションを検知します。
</p>
<p>
未承認トランザクションはtransactionInfo.height=0 で受信します。
</p>

<p>
■注意事項 受信先アドレスやモザイクID で受信検知をする場合は
送信者がネームスペースを利用して送信している場合もあるのでご注意ください。
たとえば、メインネットでXYM のモザイクID は6BED913FA20223F8 ですが、
ユーザーがネームスペースID(symbol.xym) で送信した場合はトランザクションにはE74B99BA41F4AFEE というIDが記録されています。
</p>

<h3>10.3 ブロック監視</h3>
<p>
新規に生成されたブロックを検知します。
</p>

<h3>10.4 署名要求</h3>
<p>
署名が必要なトランザクションが発生すると検知します。
</p>

<p>
指定アドレスが関係するすべてのアグリゲートトランザクションが検知されます。
連署が必要かどうかは別途フィルターして判断します。
</p>

<h3>10.5 現場で使えるヒント</h3>

<h4>10.5.1 常時コネクション</h4>
<p>
一覧からランダムに選択し、接続を試みます。
</p>
<p>
タイムアウト値を設定しておき、応答の悪いノードに接続した場合は選びなおします。
エンドポイント/node/health を確認してステータス異常の場合はノードを選びなおします。
</p>

<p>
■レポジトリの作成, ノードURL の取得 v3 ではリポジトリがないため、接続できるノードのURL を返却します。
</p>

<p>
■リスナーの常時接続
</p>
<p>
リスナーがclose した場合は再接続します。
</p>
<p>
■リスナー開始
</p>
<h4>10.5.2 未署名トランザクション自動連署</h4>
<p>
未署名のトランザクションを検知して、署名＆ネットワークにアナウンスします。
初期画面表示時と画面閲覧中の受信と２パターンの検知が必要です
</p>
<p>
■注意事項 スキャムトランザクションを自動署名しないように、送信元のアカウントを
確認するなどのチェック処理を必ず実施するようにしてください。
</p>



{% endtrans %}
