{#

Description text for Section 9.

#}

{{ attach_library('core/drupal.dialog.ajax') }}

{% set qls_ss13_deserialize_payload_form = path('qls_ss13.deserialize_payload_form') %}
{% set qls_ss13_verify_importance_block_form = path('qls_ss13.verify_importance_block_form') %}
{% set qls_ss13_verify_account_info_form = path('qls_ss13.verify_account_info_form') %}
{% set qls_ss13_verify_mosaic_metadata_form = path('qls_ss13.verify_mosaic_metadata_form') %}
{% set qls_ss13_verify_account_metadata_form = path('qls_ss13.verify_account_metadata_form') %}


{% trans %}
<h2>第 13 章 検証</h2>

<p>
ブロックチェーン上に記録されたさまざまな情報を検証します。
ブロックチェーンへのデータ記録は全ノードの合意を持って行われますが、
ブロックチェーンへのデータ参照はノード単体からの情報取得であるため、
信用できないノードの情報を元にして新たな取引を行いたい場合は、
ノードから取得したデータに対して検証を行う必要があります。
</p>

<h3>13.1 トランザクションの検証</h3>
<p>
トランザクションがブロックヘッダーに含まれていることを検証します。
この検証が成功すれば、トランザクションがブロックチェーンの合意によって承認されたものとみなすことができます。
</p>

<h4>13.1.1 検証するペイロード</h4>
<p>
今回検証するトランザクションペイロードとそのトランザクションが記録されているとされるブロック高です。
</p>

<h4><a href={{ qls_ss13_deserialize_payload_form }}>13.1.2 payload 確認</a></h4>
<p>
トランザクションの内容を確認します。
</p>

<h4>13.1.3 署名者の検証</h4>
<p>
トランザクションがブロックに含まれていることが確認できれば自明ですが、
念のため、アカウントの公開鍵でトランザクションの署名を検証しておきます。
</p>

<h4>13.1.4 マークルコンポーネントハッシュの計算</h4>
<p>
トランザクションのハッシュ値には連署者の情報が含まれていません。
一方でブロックヘッダーに格納されるマークルルートはトランザクションのハッシュに連署者の情報が含めたものが格納されます。
そのためトランザクションがブロック内部に存在しているかどうかを検証する場合は、
トランザクションハッシュをマークルコンポーネントハッシュに変換しておく必要があります。
</p>

<h4>13.1.5 InBlock の検証</h4>
<p>
ノードからマークルツリーを取得し、先ほど計算したmerkleComponentHash からブロックヘッダーのマークルルートが導出できることを確認します。
</p>
<p>
トランザクションの情報がブロックヘッダーに含まれていることが確認できました。
</p>

<h3>13.2 ブロックヘッダーの検証</h3>
<p>
既知のブロックハッシュ値（例：ファイナライズブロック）から、検証中のブロックヘッダーまでたどれることを検証します。
</p>

<h4>13.2.1 normal ブロックの検証</h4>

<p>
true が出力されればこのブロックハッシュは前ブロックハッシュ値の存在を認知していることになります。
同様にしてn 番目のブロックがn-1 番目のブロックの存在を確認し、最後に検証中のブロックにたどり着きます。
これで、どのノードに問い合わせても確認可能な既知のファイナライズブロックが、検証したいブロックの存在に支えられていることが分かりました。
</p>

<h4><a href={{ qls_ss13_verify_importance_block_form }}>13.2.2 importance ブロックの検証</a></h4>

<p>
importanceBlock は、importance 値の再計算が行われるブロック(720 ブロック毎、テストネットは180 ブロック毎) です。
NormalBlock に加えて以下の情報が追加されています。
<ul>
<li>votingEligibleAccountsCount</li>
<li>harvestingEligibleAccountsCount</li>
<li>totalVotingBalance</li>
<li>previousImportanceBlockHash</li>
</ul>
</p>

<p>
後述するアカウントやメタデータの検証のために、stateHashSubCacheMerkleRootsを検証しておきます。
</p>

<h4>13.2.3 stateHash の検証</h4>

<p>
ブロックヘッダーの検証に利用した9 個のstate がstateHashSubCacheMerkleRootsから構成されていることがわかります。
</p>

<h3>13.3 アカウント・メタデータの検証</h3>
<p>
マークルパトリシアツリーを利用して、トランザクションに紐づくアカウントやメタデータの存在を検証します。
サービス提供者がマークルパトリシアツリーを提供すれば、利用者は自分の意志で選択したノードを使ってその真偽を検証することができます。
</p>

<h4><a href={{ qls_ss13_verify_account_info_form }}>13.3.1 アカウント情報の検証</a></h4>

<p>
アカウント情報を葉として、マークルツリー上の分岐する枝をアドレスでたどり、ルートに到着できるかを確認します。
</p>

<h4><a href={{ qls_ss13_verify_mosaic_metadata_form }}>13.3.2 モザイクへ登録したメタデータの検証</a></h4>
<p>
モザイクに登録したメタデータValue 値を葉として、
マークルツリー上の分岐する枝をメタデータキーで構成されるハッシュ値でたどり、ルートに到着できるかを確認します。
</p>

<h4><a href={{ qls_ss13_verify_account_metadata_form }}>13.3.3 アカウントへ登録したメタデータの検証</a></h4>
<p>
アカウントに登録したメタデータValue 値を葉として、
マークルツリー上の分岐する枝をメタデータキーで構成されるハッシュ値でたどり、ルートに到着できるかを確認します。
</p>

<h3>13.4 現場で使えるヒント</h3>
<h4>13.4.1 トラステッドウェブ</h4>
<p>
トラステッドウェブを簡単に説明すると、全てをプラットフォーマーに依存せず、かつ全てを検証せずに済むWeb の実現です。
本章の検証で分かることは、ブロックチェーンが持つすべての情報はブロックヘッダーのハッシュ値によって検証可能ということです。
ブロックチェーンはみんなが認め合うブロックヘッダーの共有とそれを再現できるフルノードの存在で成り立っています。
しかし、ブロックチェーンを活用したいあらゆるシーンでこれらを検証するための環境を維持しておくことは非常に困難です。
最新のブロックヘッダーが複数の信頼できる機関から常時ブロードキャストされていれば、
検証の手間を大きく省くことができますこのようなインフラが整えば、
都会などの数千万人が密集する超過密地帯、あるいは基地局が十分に配置できない僻地や災害時の広域ネットワーク遮断時など
ブロックチェーンの能力を超えた場所においても信頼できる情報にアクセスできるようになります。
</p>

{% endtrans %}
