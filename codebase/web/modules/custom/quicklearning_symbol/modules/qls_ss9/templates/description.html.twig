{#

Description text for Section 9.

#}

{{ attach_library('core/drupal.dialog.ajax') }}


{% set qls_ss9_settings_form = path('qls_ss9.settings') %} 
{% set qls_ss9_multi_sig_form = path('qls_ss9.multi_sig_form') %} 
{% set qls_ss9_multi_sig_actx_form = path('qls_ss9.multi_sig_actx_form') %} 
{% set qls_ss9_multi_sig_abtx_form = path('qls_ss9.multi_sig_abtx_form') %} 
{% set qls_ss9_multi_sig_cosig_form = path('qls_ss9.multi_sig_cosig_form') %} 
{% set qls_ss9_multi_sig_confirm_form = path('qls_ss9.multi_sig_confirm_form') %} 
{% set qls_ss9_multi_sig_modify_form = path('qls_ss9.multi_sig_modify_form') %} 

{% trans %}
<h2>第9 章 マルチシグ化</h2>

<p>
アカウントのマルチシグ化について説明します。
</p>

<h3>9.0.1 注意事項</h3>
<p>
一つのマルチシグアカウントに登録できる連署者の数は25 個です。
一つのアカウントは最大25 個のマルチシグの連署者になれます。
マルチシグは最大3 階層まで構成できます。
本書では1 階層のマルチシグのみ解説します。</p>

<h4><a href={{ qls_ss9_settings_form }}>9.0.2 アカウントの準備</a></h4>
<p>
この章のサンプルソースコードで使用するアカウントを作成し、それぞれの秘密鍵を出力しておきます。
本章でマルチシグ化したアカウントBob は、Carol の秘密鍵を紛失すると使えなくなってしまうのでご注意ください。
</p>
<p>
テストネットの場合はFAUCET でネットワーク手数料分をbob とcarol1 に補給しておきます。
• Faucet
– https://testnet.symbol.tools/
</p>

<h3><a href={{ qls_ss9_multi_sig_form }}>9.1 マルチシグの登録</a></h3>

<p>
Symbol ではマルチシグアカウントを新規に作成するのではなく、
既存アカウントについて連署者を指定してマルチシグ化します。
マルチシグ化には連署者に指定されたアカウントの承諾署名(オプトイン) が必要なため、
アグリゲートトランザクションを使用します。
</p>

<h3>9.2 確認</h3>
<h4>9.2.1 マルチシグ化したアカウントの確認</h4>
<p>
cosignatoryAddresses が連署者として登録されていることがわかります。
また、minApproval:3 によりトランザクションが成立するために必要な署名数3 
minRemoval: 3により連署者を取り外すために必要な署名者数は3 であることがわかります。
</p>
<h4>9.2.2 連署者アカウントの確認</h4>
<p>
multisigAddresses に対して連署する権利を持っていることが分かります。
</p>

<h3>9.3 マルチシグ署名</h3>
<p>
マルチシグ化したアカウントからモザイクを送信します。
</p>

<h4><a href={{ qls_ss9_multi_sig_actx_form }}>9.3.1 アグリゲートコンプリートトランザクションで送信</a></h4>

<p>
アグリゲートコンプリートトランザクションの場合、
ノードにアナウンスする前に連署者の署名を全て集めてからトランザクションを作成します。
</p>

<h4><a href={{ qls_ss9_multi_sig_abtx_form }}>9.3.2 アグリゲートボンデッドトランザクションで送信</a></h4>
<p>
アグリゲートボンデッドトランザクションの場合は連署者を指定せずにアナウンスできます。
事前にハッシュロックでトランザクションを留め置きしておくことを宣言しておき、
連署者がネットワーク上に留め置きされたトランザクションに追加署名することで完成となります。
</p>
<p>
ボンデッドトランザクションがノードに取り込まれるとパーシャル署名状態となるので、
8. ロックで紹介した連署を使用して、マルチシグアカウントで<a href={{ qls_ss9_multi_sig_cosig_form }}>連署</a>します。
連署をサポートするウォレットで承認することもできます。
</p>

<h3><a href={{ qls_ss9_multi_sig_confirm_form }}>9.4 マルチシグ送信の確認</a></h3>
<p>
マルチシグで行った送信トランザクションの結果を確認してみます。
</p>

<h3><a href={{ qls_ss9_multi_sig_modify_form }}>9.5 マルチシグ構成変更</a></h3>
<h4>9.5.1 マルチシグ構成の縮小</h4>
<p>
連署者を減らすには除名対象アドレスに指定するとともに
最小署名者数を連署者数が超えてしまわないように調整してトランザクションをアナウンスします。
除名対象者を連署者に含む必要はありません。
</p>

<h4>9.5.2 連署者構成の差替え</h4>
<p>
連署者を差し替えるには、追加対象アドレスと除名対象アドレスを指定します。
新たに追加指定するアカウントの連署は必ず必要です。
</p>

<h3>9.6 現場で使えるヒント</h3>
<h4>9.6.1 多要素認証</h4>
<p>
秘密鍵の管理を複数の端末に分散させることができます。
セキュリティ用の鍵を用意しておけば、紛失・漏洩時にも安全に回復することができます。
また、マルチシグの安全運用については盗難時と紛失時の2 パターンを検討しておく必要があるのでご注意ください。
- 盗難時：ほかにも秘密鍵を使える人がいる。
- 紛失時：だれもその秘密鍵を使えなくなる。
</p>
<h4>9.6.2 アカウントの所有</h4>
<p>
マルチシグ化したアカウントの秘密鍵は無効化し、
マルチシグを解除しない限りたとえ秘密鍵を知っていたとしてもモザイク送信などはできなくなります。
モザイクの章で説明した通り、所有を「自分の意思で手放すことができる状態」だとすると、
マルチシグ化したアカウントがもつモザイク等の所有者は連署者になります。
また、Symbol ではマルチシグの構成変更が可能ですのでアカウントの所有を他の連署者に安全に移転することができます。
</p>
<h4>9.6.3 ワークフロー</h4>
<p>
Symbol ではマルチシグを3 階層まで構成することができます(マルチレベルマルチシグ)。
マルチレベルマルチシグを用いることで、バックアップ鍵を不正に持ち出して連署を完成させたり、
承認者と監査役だけで署名を完成させるといったことを防ぐことができます。
これによって、ブロックチェーン上にトランザクションが存在することが
現実社会のワークフローなどの条件を満たした証拠として提示することができます。
</p>



{% endtrans %}
